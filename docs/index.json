[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/index.js",
    "content": "import is from 'is_js';\n\n/**\n * A Moodle version string. These are the version numbers used on the\n * [Moodle download page](https://download.moodle.org/releases/latest/) and\n * displayed in the footer of the Moodle admin area.\n *\n * Moodle version strings generally consist of the branch string separated from\n * the release number by a period. The initial release for a given branch is\n * given the release number zero, which may be omitted. Alpha and Beta releases\n * have `dev` appended, and weekly releases have a plus symbol appended.\n *\n * For example, all the development releases of the Moodle 3.5 branch have the\n * version string `3.5dev`, the initial release is `3.5`, the\n * first update release is `3.5.1`, and all weekly releases between the\n * release of `3.5.1` and `3.5.2` share `3.5.1+`.\n *\n * @typedef {string} VersionString\n * @example '3.5dev'\n * @example '3.5'\n * @example '3.5+'\n * @example '3.5.1'\n * @example '3.5.1+'\n */\n\n/**\n * A moodle version number. These version numbers are used under-the-hood in\n * the Moodle source code. They consist of the branch's branch date number\n * followed by the release number, optionally followed by a period and an\n * incremental change number.\n *\n * For example, the Moodle 3.3.6 release has the version number `2017051506.00`.\n * The branch date number for Moodle 3.3 is `20170515` (a {@link DateNumber}),\n * which is then followed by the two-digit form of the release number, `06`, and\n * an incremental change number of `00`.\n *\n * @typedef {string|number} VersionNumber\n * @example '2017051506.00'\n * @see DateNumber\n */\n\n/**\n * A Moodle branch string. These are the human-friendly major-version numbers\n * used throught the official Moodle documentation. They take the form of two\n * sets of digits separated by a period, e.g. `3.5` or `3.10`.\n * \n * @typedef {string} BranchString\n * @example '3.5'\n */\n\n/**\n * A Moodle branch number. These are used under-the-hood to represent Moodel\n * branches within the Moodle code. They take the form of a (usuall) two-digit\n * integer number - the human-friendly branch without the period e.g. Moodle\n * 3.5 has a branch number of `35`. The exception being Moodle 3.10 which has a\n * branch number of 310.\n *\n * @typedef {number|string} BranchNumber\n * @see BranchString\n * @example 35\n */\n\n/**\n * A Moodle release string. These are the release strings Moodle's documentation\n * describes as *human friendly*. They are used in the following contexts:\n * \n * 1. The admin section of web interface\n * 2. The CLI command `admin/cli/cfg.php --name=release`\n * 3. The variable `$release` in `version.php`\n *\n * In some contexts they're pre-fixed with the word *Moodle*, in others they're\n * not.\n *\n * Examples:\n * \n * * `'3.3.6 (Build: 20180517)'` - the offical Moodle 3.3.6 release.\n * * `'Moodle 3.5+ (Build: 20180614)'` - a weekly Moodle 3.5.0 release.\n *\n * @typedef {string} ReleaseString\n * @see VersionString\n * @example '3.3.6 (Build: 20180517)'\n */\n\n/**\n * An integer representing an offical Moodle release within a branch. The\n * initial release of any branch has the release number 0, subsequent offical\n * update releases then count up from there.\n * \n * @typedef {number|string} ReleaseNumber\n */\n\n/**\n * Moodle releases are categoriesed into one of three types:\n *\n * 1. Development releases, both betas and alphas.\n * 2. Official stable releases.\n * 3. Weekly updates to official stable releases.\n *\n * These three values are represented as `'development'`, `'official'`, and\n * `'weekly'`.\n *\n * @typedef {string} ReleaseType\n */\n\n/**\n * A release suffix is used to indicate the release type in some Moodle version\n * strings. Possible values are:\n *\n * * `'dev'` for development releases.\n * * `''` (an empty string) for official stable releases.\n * * `+` for weekly updates to official stable releases.\n * \n * @typedef {string} ReleaseSuffix\n */\n\n/**\n * Each released moodle build, both the weeklys and the offical updates are\n * assigned a build number which takes the form of a {@link DateNumber}.\n * \n * @typedef {DateNumber} BuildNumber\n */\n\n/**\n * An 8-digit date representation used within a number of Moodle version\n * identifiers. The first four digits represent the year, the next two the\n * month and the last two the day of the month.\n *\n * For example, Christmas 2018 has the date number `20181225`.\n * \n * @typedef {string|number} DateNumber\n * @example '20181225'\n */\n\n/**\n * A mapping form branch numbers to branching date numbers.\n * \n * @type {Map<BranchNumber, DateNumber>}\n * @protected\n */\nconst BNUM_BDNUM_MAP = {\n    '22': 20111205,\n    '23': 20120625,\n    '24': 20121203,\n    '25': 20130514,\n    '26': 20131118,\n    '27': 20140512,\n    '28': 20141110,\n    '29': 20150511,\n    '30': 20151116,\n    '31': 20160523,\n    '32': 20161205,\n    '33': 20170515,\n    '34': 20171113,\n    '35': 20180517,\n\t'36': 20181203,\n\t'37': 20190520,\n\t'38': 20191118,\n    '39': 20200615,\n    '310': 20201109,\n    '311': 20210517,\n    '400': 20220419,\n    '401': 20221128,\n    '402': 20230424\n};\n\n/**\n * A mapping form branching date numbers to branch numbers.\n * \n * @type {Map<DateNumber, BranchNumber>}\n * @protected\n */\nconst BDNUM_BNUM_MAP = {};\nfor(const bn of Object.keys(BNUM_BDNUM_MAP)){\n    BDNUM_BNUM_MAP[BNUM_BDNUM_MAP[bn]] = parseInt(bn);\n}\n\n/**\n * A list of LTS (Long-Term Support) branch numbers.\n *\n * @type {Array<number>}\n * @protected\n */\nconst LTS_BNUMS = [27, 31, 35];\n\n/**\n * A lookup table to test if a given branch number is a long-term support (LTS)\n * branch. This lookup table is generated from {@link LTS_BNUMS}.\n *\n * @type {Object}\n * @protected\n * @see LTS_BNUMS\n */\nconst BNUM_LTS_LOOKUP = {};\nfor(const bnum of LTS_BNUMS){\n    BNUM_LTS_LOOKUP[bnum] = true;\n}\n\n/**\n * Convert a value to a string for use in string representations of the\n * version. `undefined` is returned as `'??'` and all other values are\n * converted to a string with JavaScript's `String()` function.\n *\n * @param {*} val\n * @return {string}\n * @private\n*/\nfunction TO_STR(val){\n    return is.undefined(val) ? '??' : String(val);\n}\n\n/**\n * A class for parsing and representing\n * [version information](https://docs.moodle.org/35/en/Moodle_version) for the\n * [Moodle VLE](http://moodle.org/).\n *\n * The class can parse both the human-friendly Moodle release strings like\n * `3.3.6 (Build: 20180517)`, and the underlying raw version numbers like\n * `2017051506`.\n *\n * Note that this class only reliably understands version information from\n * Moodle 2.2 up. The reason for this limitation is that this is the first\n * Moodle version which uses the now standard versioning conventions.\n *\n * @see https://docs.moodle.org/35/en/Moodle_version\n * @see https://docs.moodle.org/dev/Releases\n */\nclass MoodleVersion {\n    /**\n     * By default version objects contain no information.\n     *\n     * If a string is passed, the object is initialised using\n     * {@link MoodleVersion.fromString}, and if an object is passed then\n     * {@link MoodleVersion.fromObject} is used instead.\n     *\n     * @param {string|Object} versionInfo\n     * @throws TypeError\n     * @throws RangeError\n     */\n    constructor(versionInfo) {\n        let newObj;\n        if(is.not.undefined(versionInfo)){\n            if(is.string(versionInfo)){\n                newObj = MoodleVersion.fromString(versionInfo);\n            }else if(is.object(versionInfo) && is.not.array(versionInfo) && is.not.function(versionInfo) && is.not.error(versionInfo)){\n                newObj = MoodleVersion.fromObject(versionInfo);\n            }else{\n                throw new TypeError('the MoodleVersion constructor only accepts strings and objects');\n            }\n        }\n        \n        /**\n         * @type {BranchNumber|undefined}\n         */\n        this._branchNumber = undefined;\n        if(newObj) this._branchNumber = newObj._branchNumber;\n        \n        /**\n         * @type {DateNumber|undefined}\n         */\n        this._branchingDateNumber = undefined;\n        if(newObj) this._branchingDateNumber = newObj._branchingDateNumber;\n        \n        /**\n         * @type {ReleaseNumber|undefined}\n         */\n        this._releaseNumber = undefined;\n        if(newObj) this._releaseNumber = newObj._releaseNumber;\n        \n        /**\n         * @type {ReleaseType|undefined}\n         */\n        this._releaseType = undefined;\n        if(newObj) this._releaseType = newObj._releaseType;\n        \n        /**\n         * @type {BuildNumber|undefined}\n         */\n        this._buildNumber = undefined;\n        if(newObj) this._buildNumber = newObj._buildNumber;\n    }\n    \n    /**\n     * Test if a given value is a date number, i.e. an 8-digit number of the\n     * form `YYYYMMDD`.\n     *\n     * @param {*} val - the value to test.\n     * @param {boolean} [strictTypeCheck=false] - whether or not to enable\n     * strict type checking. With strict type cheking enabled, string\n     * representation of otherwise valid values will return `false`.\n     * @return {boolean}\n     */\n    static isDateNumber(val, strictTypeCheck){\n        if(is.not.number(val)){\n            if(strictTypeCheck) return false;\n            if(is.not.string(val)) return false;\n        }\n        return String(val).match(/^[12]\\d{3}[01]\\d[0123]\\d$/) ? true : false;\n    }\n    \n    /**\n     * Test if a given value is a branch string, e.g. `'3.5'` or `'3.10'`.\n     *\n     * @param {*} val - the value to test.\n     * @return {boolean}\n     */\n    static isBranch(val){\n        return is.string(val) && val.match(/^[1-9][.]\\d{1,2}$/) ? true : false;\n    }\n    \n    /**\n     * Test if a given value is a branch number, e.g. `35`, `'35'`, `310` or\n     * `'310'.\n     *\n     * @param {*} val - the value to test.\n     * @param {boolean} [strictTypeCheck=false] - whether or not to enable\n     * strict type checking. With strict type cheking enabled, string\n     * representation of otherwise valid values will return `false`.\n     * @return {boolean}\n     */\n    static isBranchNumber(val, strictTypeCheck = false){\n        if(is.not.number(val)){\n            if(strictTypeCheck) return false;\n            if(is.not.string(val)) return false;\n        }\n        return String(val).match(/^[1-9]\\d{1,2}$/) ? true : false;\n    }\n    \n    /**\n     * Test if a given value is a release number.\n     *\n     * Note that if strict type checking is not enabled, the empty string is\n     * considered a valid release number, being synonymous with zero in\n     * Moodle release strings.\n     *\n     * @param {*} val - the value to test.\n     * @param {boolean} [strictTypeCheck=false] - whether or not to enable\n     * strict type checking. With strict type cheking enabled, string\n     * representation of otherwise valid values will return `false`.\n     * @return {boolean}\n     */\n    static isReleaseNumber(val, strictTypeCheck = false){\n        if(is.not.number(val)){\n            if(strictTypeCheck) return false;\n            if(is.not.string(val)) return false;\n        }\n        return val === '' || String(val).match(/^\\d+$/) ? true : false;\n    }\n    \n    /**\n     * Test if a given value is a valid release type.\n     *\n     * @param {*} val - the value to test.\n     * @return {boolean}\n     * @see ReleaseType\n     */\n    static isReleaseType(val){\n        return val === 'development' || val === 'official' || val === 'weekly' ? true : false;\n    }\n    \n    /**\n     * Test if a given value is a valid release suffix.\n     *\n     * @param {*} val - the value to test.\n     * @return {boolean}\n     * @see ReleaseSuffix\n     */\n    static isReleaseSuffix(val){\n        return val === 'dev' || val === '' || val === '+' ? true : false;\n    }\n    \n    /**\n     * Convert a branch number into a branch string, i.e. `35` to `'3.5'` and\n     * `310` to `'3.10'`.\n     *\n     * @param {BranchNumber} bn\n     * @return {BranchString|undefined} If the passed value can't be converted\n     * to a branch `undefined` is returned.\n     */\n    static branchFromBranchNumber(bn){\n        if(is.undefined(bn)) return undefined;\n        if(!MoodleVersion.isBranchNumber(bn, false)) return undefined;\n        const bnMatch = String(bn).match(/^(\\d)(\\d+)$/);\n        if(!bnMatch) return undefined;\n        const major = bnMatch[1];\n        let minor = bnMatch[2];\n        minor = minor.replace(/^0*([1-9]*\\d)$/, '$1'); // strip leading zeros from minor number\n        return `${major}.${minor}`;\n    }\n    \n    /**\n     * Convert a branching date number to a branch, e.g. `20180517` to\n     * `'3.5'`.\n     *\n     * @param {DateNumber} bdn\n     * @return {BranchString|undefined}\n     */\n    static branchFromBranchingDateNumber(bdn){\n        if(is.undefined(bdn)) return undefined;\n        if(!MoodleVersion.isDateNumber(bdn, false)) return undefined;\n        let bn = BDNUM_BNUM_MAP[bdn];\n        if(is.undefined(bn)) return undefined;\n        return MoodleVersion.branchFromBranchNumber(bn);\n    }\n    \n    /**\n     * Convert a branch string into a branch number, i.e. `'3.5'` to `35`.\n     *\n     * @param {BranchString} b\n     * @return {number|undefined} If the passed value can't be converted\n     * to a branch number `undefined` is returned.\n     */\n    static branchNumberFromBranch(b){\n        if(is.undefined(b)) return undefined;\n        if(!MoodleVersion.isBranch(b)) return undefined;\n        const parts = b.split(/[.]/);\n        const major = parts[0];\n        let minor = parts[1];\n        if(parseInt(major) >= 4 && minor.length == 1) minor = `0${minor}`;\n        return parseInt(`${major}${minor}`);\n    }\n    \n    /**\n     * Convert a branching date number to a branch number, e.g. `20180517` to\n     * `35`.\n     *\n     * @param {DateNumber} bdn\n     * @return {number|undefined}\n     */\n    static branchNumberFromBranchingDateNumber(bdn){\n        if(is.undefined(bdn)) return undefined;\n        if(!MoodleVersion.isDateNumber(bdn, false)) return undefined;\n        return BDNUM_BNUM_MAP[bdn] ? BDNUM_BNUM_MAP[bdn] : undefined;\n    }\n    \n    /**\n     * Convert a branch to a branching date number, e.g. `'3.5'` to `20180517`.\n     *\n     * @param {BranchString} b\n     * @return {number|undefined}\n     */\n    static branchingDateNumberFromBranch(b){\n        if(is.undefined(b)) return undefined;\n        const bn = MoodleVersion.branchNumberFromBranch(b);\n        if(is.undefined(bn)) return undefined;\n        return BNUM_BDNUM_MAP[bn] ? BNUM_BDNUM_MAP[bn] : undefined;\n    }\n    \n    /**\n     * Convert a branch number to a branching date number, e.g. `35` to `20180517`.\n     *\n     * @param {BranchNumber} bn\n     * @return {number|undefined}\n     */\n    static branchingDateNumberFromBranchNumber(bn){\n        if(is.undefined(bn)) return undefined;\n        return BNUM_BDNUM_MAP[bn] ? BNUM_BDNUM_MAP[bn] : undefined;\n    }\n    \n    /**\n     * Convert a date number to a date object. The date object will represent\n     * midnight UTC on the given date.\n     *\n     * @param {DateNumber} dn\n     * @return {Date}\n     * @throws {TypeError}\n     */\n    static dateFromDateNumber(dn){\n        if(!MoodleVersion.isDateNumber(dn)) throw new TypeError('date number must of the form YYYYMMDD');\n        const parts = String(dn).match(/^(\\d{4})(\\d{2})(\\d{2})$/);\n        return new Date(`${parts[1]}-${parts[2]}-${parts[3]}T00:00:00.000Z`);\n    }\n    \n    /**\n     * Convert a date object to a date number. The date will be interpreted as\n     * UTC.\n     *\n     * @param {Date} d\n     * @return {DateNumber}\n     * @throws {TypeError}\n     */\n    static dateNumberFromDate(d){\n        if(is.not.date(d)) throw new TypeError('date object required');\n        let m = d.getUTCMonth() + 1;\n        let mm = `${m < 10 ? '0' : ''}${m}`;\n        let day = d.getUTCDate();\n        let dd = `${day < 10 ? '0' : ''}${day}`;\n        return parseInt(`${d.getUTCFullYear()}${mm}${dd}`);\n    }\n    \n    /**\n     * Convert a release type to a release suffix, e.g. `'weekly'` to `'+'`.\n     *\n     * @param {ReleaseType} rt\n     * @return {ReleaseSuffix|undefined}\n     */\n    static releaseSuffixFromReleaseType(rt){\n        if(is.not.string(rt)) return undefined;\n        switch(rt.toLowerCase()){\n            case 'development':\n                return 'dev';\n            case 'official':\n                return '';\n            case 'weekly':\n                return '+';\n        }\n        return undefined;\n    }\n    \n    /**\n     * Convert a relase suffix to a release type, e.g. `'+'` to `'weekly'`.\n     *\n     * @param {ReleaseSuffix} rs\n     * @return {ReleaseType|undefined}\n     */\n    static releaseTypeFromReleaseSuffix(rs){\n        if(is.not.string(rs)) return undefined;\n        switch(rs.toLowerCase()){\n            case 'dev':\n                return 'development';\n            case '':\n                return 'official';\n            case '+':\n                return 'weekly';\n        }\n        return undefined;\n    }\n    \n    /**\n     * Convert a release type to a number. Useful for version comparisons.\n     *\n     * All invalid values convert to `0`, `'development'` to `1`, `'official'`\n     * to `2`, and `'weekly'` to 3.\n     *\n     * @param {*} rt\n     * @return {number}\n     */\n    static numberFromReleaseType(rt){\n        if(!MoodleVersion.isReleaseType(rt)) return 0;\n        switch(rt){\n            case 'weekly': return 3;\n            case 'official': return 2;\n            default: return 1;\n        }\n    }\n    \n    /**\n     * Compare two values to see if they represent the same version, a\n     * greater version, or a lesser version.\n     *\n     * When ranking versions, the branch is given the highest weight, then the\n     * release number, then the release type,\n     * and finally the build number. When comparing release types,\n     * `'development'` is considered earlier `'official'`, which is considered\n     * earlier than `'weekly'`.\n     *\n     * @param {*} val1\n     * @param {*} val2\n     * @return {number} Unless both values are moodle vesion objects, `NaN` is\n     * returned. If `val1` represents an earlier version than `val2` `-1` is\n     * returned, if `val1` and `val2` represent the same version `0` is\n     * returned, and if `val1` represents a later version than `val2` `1` is\n     * returned.\n     */\n    static compare(val1, val2){\n        // unless we get two Moodle versions, return NaN\n        if(!((val1 instanceof MoodleVersion) && (val2 instanceof MoodleVersion))) return NaN;\n        \n        // try find a difference in branch\n        const b1 = is.number(val1.branchNumber) ? val1.branchNumber : 0;\n        const b2 = is.number(val2.branchNumber) ? val2.branchNumber : 0;\n        if(b1 < b2) return -1;\n        if(b1 > b2) return 1;\n        \n        // if there was no difference in branch, try find a difference in release number\n        const r1 = is.number(val1.releaseNumber) ? val1.releaseNumber : 0;\n        const r2 = is.number(val2.releaseNumber) ? val2.releaseNumber : 0;\n        if(r1 < r2) return -1;\n        if(r1 > r2) return 1;\n        \n        // if we've still not found a difference, check the release type\n        const t1 = MoodleVersion.numberFromReleaseType(val1.releaseType);\n        const t2 = MoodleVersion.numberFromReleaseType(val2.releaseType);\n        if(t1 < t2) return -1;\n        if(t1 > t2) return 1;\n        \n        // finally, try split the difference with the build number\n        const bn1 = is.number(val1.buildNumber) ? val1.buildNumber : 0;\n        const bn2 = is.number(val2.buildNumber) ? val2.buildNumber : 0;\n        if(bn1 < bn2) return -1;\n        if(bn1 > bn2) return 1;\n        \n        // if we still haven't split the difference, they must be equal\n        return 0;\n    }\n    \n    /**\n     * A factory method for producing a Moodle Version object given all its\n     * properties.\n     *\n     * If only one of the branch and branching date are passed, and if a known\n     * mapping exists, the other is auto-completed.\n     *\n     * This function can be used to create version objects which contain\n     * unknown mappings between Moodle branches and branching dates.\n     *\n     * @param {Object} obj - an object defining zero or more of the following\n     * keys:\n     *\n     * * `branch` (e.g. `'3.5'`) or `branchNumber` (e.g. `35`) - if both are\n     *   specified `branchNumber` takes precedence.\n     * * `branchingDate` or `branchingDateNumber` - if both are specified\n     *   `branchingDateNumber` takes precedence.\n     * * `releaseNumber`\n     * * `releaseType` (e.g. `'weekly'`) or `releaseSuffix` (e.g. `'+'`) - if\n     *   both are specified, `releaseSuffix` takes precedence\n     * * `buildNumber`\n     * @throws {TypeError} A type error is thrown if an object is not passed,\n     * or, if any of the keys within that object map to an invalid value.\n     */\n    static fromObject(obj){\n        if(is.not.object(obj)) throw new TypeError('object required');\n        \n        const ans = new MoodleVersion();\n        \n        // set the branch if passed\n        if(is.propertyDefined(obj, 'branch') || is.propertyDefined(obj, 'branchNumber')){\n            if(is.not.undefined(obj.branchNumber)){\n                if(!MoodleVersion.isBranchNumber(obj.branchNumber)) throw new TypeError('invalid branch number');\n                ans._branchNumber = parseInt(obj.branchNumber);\n            }else if(is.not.undefined(obj.branch)){\n                if(!MoodleVersion.isBranch(obj.branch)) throw new TypeError('invalid branch');\n                ans._branchNumber = MoodleVersion.branchNumberFromBranch(obj.branch);\n            }\n        }\n        \n        // set the branching date if passed\n        if(is.propertyDefined(obj, 'branchingDate') || is.propertyDefined(obj, 'branchingDateNumber')){\n            if(is.not.undefined(obj.branchingDateNumber)){\n                if(!MoodleVersion.isDateNumber(obj.branchingDateNumber)) throw new TypeError('invalid branching date number');\n                ans._branchingDateNumber = parseInt(obj.branchingDateNumber);\n            }else if(is.not.undefined(obj.branchingDate)){\n                if(is.not.date(obj.branchingDate)) throw new TypeError('invalid branching date');\n                ans._branchingDateNumber = MoodleVersion.dateNumberFromDate(obj.branchingDate);\n            }\n        }\n        \n        // set the release number if passed\n        if(is.not.undefined(obj.releaseNumber)){\n            if(!MoodleVersion.isReleaseNumber(obj.releaseNumber)) throw new TypeError('invalid release number');\n            ans._releaseNumber = parseInt(obj.releaseNumber);\n        }\n        \n        // set the release type if passed\n        if(is.propertyDefined(obj, 'releaseType') || is.propertyDefined(obj, 'releaseSuffix')){\n            if(is.not.undefined(obj.releaseSuffix)){\n                if(!MoodleVersion.isReleaseSuffix(obj.releaseSuffix)) throw new TypeError('invalid release suffix');\n                ans._releaseType = MoodleVersion.releaseTypeFromReleaseSuffix(obj.releaseSuffix);\n            }else if(is.not.undefined(obj.releaseType)){\n                if(!MoodleVersion.isReleaseType(obj.releaseType)) throw new TypeError('invalid release type');\n                ans._releaseType = obj.releaseType.toLowerCase();\n            }\n        }\n        \n        // set the build number if passed\n        if(is.not.undefined(obj.buildNumber)){\n            if(!MoodleVersion.isDateNumber(obj.buildNumber)) throw new TypeError('invalid build number');\n            ans._buildNumber = parseInt(obj.buildNumber);\n        }\n        \n        // if there's a branch but no branching date, try auto-complete it\n        if(is.number(ans._branchNumber) && is.undefined(ans._branchingDateNumber) && is.number(BNUM_BDNUM_MAP[ans._branchNumber])){\n            ans._branchingDateNumber = BNUM_BDNUM_MAP[ans._branchNumber];\n        }\n        \n        // if there's a branching date but no branch, try auto-complete it\n        if(is.number(ans._branchingDateNumber) && is.undefined(ans._branchNumber) && is.number(BDNUM_BNUM_MAP[ans._branchingDateNumber])){\n            ans._branchNumber = BDNUM_BNUM_MAP[ans._branchingDateNumber];\n        }\n        \n        return ans;\n    }\n    \n    /**\n     * A regular expression for matching human-friendly Moodle release strings.\n     * This RE is case-insensitive and will allow for the optional pre-fixing of\n     * the word *Moodle* with or whithout a separating space.\n     *\n     * @type {RegExp}\n     * @see {@link ReleaseString}\n     */\n    static get releaseRE(){\n        return /(?:Moodle[ ]?)?(\\d[.]\\d{1,2})(?:[.](\\d+))?(dev|[+])?[ ]?[(]Build[:][ ]?(\\d{8})[)]/i;\n    }\n    \n    /**\n     * A regular expression for matching short version strings like `'3.5+'` (as\n     * used on the Moodle download page). This RE is case-insensitive and will\n     * allow for the optional pre-fixing of the word *Moodle* with or whithout\n     * a separating space.\n     *\n     * @type {RegExp}\n     * @see {@link VersionString}\n     */\n    static get versionRE(){\n        return /(?:Moodle[ ]?)?(\\b\\d[.]\\d{1,2})(?:[.](\\d+))?(dev|[+])?/i;\n    }\n    \n    /**\n     * A regular expression for matching under-the-hood version numbers like\n     * `'2017051506'` or `'2017051506.00'`.\n     *\n     * @type {RegExp}\n     * @see {@link VersionNumber}\n     */\n    static get versionNumberRE(){\n        return /(\\d{8})(\\d{2})(?:[.](\\d{2}))?/i;\n    }\n    \n    /**\n     * Build a version object from a version string. The vesion string can be\n     * in one of the following formats:\n     *\n     * * A human-friendly full release string ({@link ReleaseString}), e.g.\n     *   `'Moodle 3.5+ (Build: 20180614)'` (will be accepted with or without\n     *   the `'Moodle'` prefix).\n     * * A human-friendly short version string ({@link VersionString}), e.g.\n     *  `'Moodle 3.3.6+'` (will be accepted with or without the `'Moodle'`\n     *  prefix).\n     * * An under-the-hood version number ({@link VersionNumber}), e.g.\n     * * `'2017051506'` or `'2017051506.00'`.\n     * * A string as returned by calling `.toString()` on an instance of this\n     *   class.\n     *\n     * @param {string} verStr - the version string to parse.\n     * @return {MoodleVersion}\n     * @throws {TypeError}\n     * @throws {RangeError}\n     * @see {@link ReleaseString}\n     * @see {@link VersionString}\n     * @see {@link VersionNumber}\n     * @see {@link MoodleVersion#toString}\n     */\n    static fromString(verStr){\n        if(is.not.string(verStr)) throw new TypeError('version string required');\n        const ans = new MoodleVersion();\n        \n        // first try match against a full human-friendly release string\n        let matched = MoodleVersion.releaseRE.exec(verStr);\n        if(matched){\n            ans.branch = matched[1];\n            ans.releaseNumber = matched[2] ? matched[2] : 0;\n            ans.releaseSuffix = matched[3] ? matched[3] : '';\n            ans.buildNumber = matched[4];\n            return ans;\n        }\n        \n        // then try match against an under-the-hood Moodle version number\n        matched = MoodleVersion.versionNumberRE.exec(verStr);\n        if(matched){\n            ans.branchingDateNumber = matched[1];\n            ans.releaseNumber = matched[2] ? parseInt(matched[2]) : 0;\n            return ans;\n        }\n        \n        // next try match a string as produced by .toString()\n        matched = (/((?:[0-9]|[?]{2})[.](?:[0-9]|[?]{2}))[.]((?:[0-9]+|[?]{2}))(dev|[+])?[ ][(]type[:][ ](development|official|weekly|[?]{2})[,][ ]branching[ ]date[:][ ](\\d{8}|[?]{2})[ ][&][ ]build[:][ ](\\d{8}|[?]{2})[)]/i).exec(verStr);\n        if(matched){\n            const ansObj = {};\n            if(matched[1] != '??.??') ansObj.branch = matched[1];\n            if(matched[2] != '??') ansObj.releaseNumber = matched[2];\n            if(matched[4] != '??') ansObj.releaseType = matched[4];\n            if(matched[5] != '??') ansObj.branchingDateNumber = matched[5];\n            if(matched[6] != '??') ansObj.buildNumber = matched[6];\n            return MoodleVersion.fromObject(ansObj);\n        }\n        \n        // finally try match against a short human-friendly version string\n        matched = MoodleVersion.versionRE.exec(verStr);\n        if(matched){\n            ans.branch = matched[1];\n            ans.releaseNumber = matched[2] ? matched[2] : 0;\n            ans.releaseSuffix = matched[3] ? matched[3] : '';\n            return ans;\n        }\n        \n        // if no match was found, throw a range error\n        throw new RangeError(`failed to extract Moodle version from string: ${verStr}`);\n    }\n    \n    // TO DO - update constructor to accept strings and objects\n    \n    /**\n     * The version's branch number, if known. This is the two-digit number\n     * used internally within the Moodle code to identify a branch, or major\n     * release.\n     *\n     * For example, all Moodle 3.5.* releases will have the branch number `35`.\n     *\n     * @type {number|undefined}\n     */\n    get branchNumber(){\n        return this._branchNumber;\n    }\n    \n    /**\n     * The branch number must be a two-digit integer between 10 and 99.\n     *\n     * Setting the branch number will also update the branching date to match.\n     *\n     * To create an object with an un-known combination of branch and branching\n     * date, use the {@link MoodleVersion.fromObject} factory method.\n     *\n     * @type {BranchNumber|undefined}\n     * @throws {TypeError}\n     * @throws {RangeError} A range error is thrown if the branch does not have\n     * a known mapping to a branching date.\n     */\n    set branchNumber(bn){\n        // short-circuit requests to set undefined\n        if(is.undefined(bn)){\n            this._branchNumber = undefined;\n            this._branchingDateNumber = undefined;\n            return;\n        }\n        \n        // check the validity of the branch number\n        if(!MoodleVersion.isBranchNumber(bn, false)){\n            throw new TypeError('Branch Numbers must be integers between 10 and 99');\n        }\n        \n        //test if we have a mapping to a branching date\n        let bdn = MoodleVersion.branchingDateNumberFromBranchNumber(bn);\n        if(is.undefined(bdn)){\n            throw new RangeError(`the branch number ${bn} does not have a known mapping to a branching date`);\n        }\n        \n        // set the branch number and branching date\n        this._branchNumber = parseInt(bn);\n        this._branchingDateNumber = bdn;\n    }\n    \n    /**\n     * The major version part of the version number, officially known as the\n     * *branch*.\n     *\n     * For example, the branch for each of the 3.4, 3.4+, 3.4.1, and 3.4.1+\n     * releases is `'3.4'`.\n     *\n     * @type {BranchString|undefined}\n     */\n    get branch(){\n        if(is.undefined(this._branchNumber)) return undefined;\n        return MoodleVersion.branchFromBranchNumber(this._branchNumber);\n    }\n    \n    /**\n     * The branch (AKA major version) must be a string consisting of two\n     * digits separated by a period, e.g. `'3.5'`.\n     *\n     * Setting the branch will also update the branching date to match.\n     *\n     * To create an object with an un-known combination of branch and branching\n     * date, use the {@link MoodleVersion.fromObject} factory method.\n     *\n     * @type {BranchString}\n     * @throws {TypeError}\n     * @throws {RangeError} A range error is thrown if the branch does not have\n     * a known mapping to a branching date.\n     */\n    set branch(b){\n        // short-circuit requests to set undefined\n        if(is.undefined(b)){\n            this._branchNumber = undefined;\n            this._branchingDateNumber = undefined;\n            return;\n        }\n        \n        // try convert the branch to a branch number\n        let bn = MoodleVersion.branchNumberFromBranch(b);\n        if(is.not.number(bn)){\n            throw new TypeError(`branches must be strings consisting of a digit, a period, and another digit. Got: ${b}`);\n        }\n        \n        // test if we have a mapping to a branching date\n        let bdn = MoodleVersion.branchingDateNumberFromBranchNumber(bn);\n        if(is.undefined(bdn)){\n            throw new RangeError(`the branch ${b} does not have a known mapping to a branching date`);\n        }\n        \n        // store the branch number & branching date\n        this._branchNumber = bn;\n        this._branchingDateNumber = bdn;\n    }\n    \n    /**\n     * The branching date as a date object.\n     *\n     * @type {Date|undefined}\n     */\n    get branchingDate(){\n        if(is.undefined(this._branchingDateNumber)) return undefined;\n        return MoodleVersion.dateFromDateNumber(this._branchingDateNumber);\n    }\n    \n    /**\n     * Setting the branching date will update the branch to match.\n     *\n     * To create an object with an un-known combination of branch and branching\n     * date, use the {@link MoodleVersion.fromObject} factory method.\n     *\n     * @type{Date|undefined}\n     * @throws {TypeError}\n     * @throws {RangeError} A range error is thrown if the branching date does\n     * not have a known mapping to a branch.\n     */\n    set branchingDate(bd){\n        // deal with un-setting\n        if(is.undefined(bd)){\n            this._branchNumber = undefined;\n            this._branchingDateNumber = undefined;\n            return;\n        }\n        \n        // make sure we got valid data\n        if(is.not.date(bd)) throw new TypeError('the branching date must be a Date object');\n        \n        // convert the date to a date number\n        let bdn = MoodleVersion.dateNumberFromDate(bd);\n        \n        // test if there's a known mapping to a branch\n        let bn = MoodleVersion.branchNumberFromBranchingDateNumber(bdn);\n        if(is.undefined(bn)){\n            throw new RangeError(`the branching date ${bd.toISOString()} does not have a known mapping to a Moodle branch`);\n        }\n        \n        // set the new values\n        this._branchNumber = bn;\n        this._branchingDateNumber = bdn;\n    }\n    \n    /**\n     * The branching date as a {@link DateNumber}.\n     *\n     * @type {DateNumber|undefined}\n     */\n    get branchingDateNumber(){\n        return this._branchingDateNumber;\n    }\n    \n    /**\n     * Setting the branching date will update the branch to match.\n     *\n     * To create an object with an un-known combination of branch and branching\n     * date, use the {@link MoodleVersion.fromObject} factory method.\n     *\n     * @type{DateNumber|undefined}\n     * @throws {TypeError}\n     * @throws {RangeError} A range error is thrown if the branching date does\n     * not have a known mapping to a branch.\n     */\n    set branchingDateNumber(bdn){\n        // deal with un-setting\n        if(is.undefined(bdn)){\n            this._branchNumber = undefined;\n            this._branchingDateNumber = undefined;\n            return;\n        }\n        \n        // make sure we got valid data\n        if(!MoodleVersion.isDateNumber(bdn)) throw new TypeError('the branching date number must be of the form YYYYMMDD');\n        bdn = parseInt(bdn); // force the date number to a number\n        \n        // test if there's a known mapping to a branch\n        let bn = MoodleVersion.branchNumberFromBranchingDateNumber(bdn);\n        if(is.undefined(bn)){\n            throw new RangeError(`the branching date number ${bdn} does not have a known mapping to a Moodle branch`);\n        }\n        \n        // set the new values\n        this._branchNumber = bn;\n        this._branchingDateNumber = bdn;\n    }\n    \n    /**\n     * The known mappings between Moodle braches and branching date numbers.\n     *\n     * @type{Map<Branch, DateNumber>}\n     */\n    get branchingDateNumbersByBranch(){\n        const ans = {};\n        for(const bn of Object.keys(BNUM_BDNUM_MAP)){\n            ans[MoodleVersion.branchFromBranchNumber(bn)] = BNUM_BDNUM_MAP[bn];\n        }\n        return ans;\n    }\n    \n    /**\n     * The known mappings between Moodle brache numberss and branching date\n     * numbers.\n     *\n     * @type{Map<BranchNumber, DateNumber>}\n     */\n    get branchingDateNumbersByBranchNumber(){\n        const ans = {};\n        for(const bn of Object.keys(BNUM_BDNUM_MAP)){\n            ans[bn] = BNUM_BDNUM_MAP[bn];\n        }\n        return ans;\n    }\n    \n    /**\n     * The known mappings between branching date numbers and Moodle branches.\n     *\n     * @type{Map<DateNumber, Branch>}\n     */\n    get branchesByBranchingDateNumber(){\n        const ans = {};\n        for(const bdn of Object.keys(BDNUM_BNUM_MAP)){\n            ans[bdn] = MoodleVersion.branchFromBranchNumber(BDNUM_BNUM_MAP[bdn]);\n        }\n        return ans;\n    }\n    \n    /**\n     * The known mappings between branching date numbers and Moodle branch\n     * numbers.\n     *\n     * @type{Map<DateNumber, BranchNumber>}\n     */\n    get brancheNumbersByBranchingDateNumber(){\n        const ans = {};\n        for(const bdn of Object.keys(BDNUM_BNUM_MAP)){\n            ans[bdn] = BDNUM_BNUM_MAP[bdn];\n        }\n        return ans;\n    }\n    \n    /**\n     * The release number part of the version number.\n     *\n     * @type {ReleaseNumber|undefined}\n     */\n    get releaseNumber(){\n        return this._releaseNumber;\n    }\n    \n    /**\n     * The release number must be an integer greater than or equal to zero.\n     *\n     * @type {ReleaseNumber|undefined}\n     * @throws {TypeError}\n     */\n    set releaseNumber(rn){\n        // short-circuit requests to set undefined\n        if(is.undefined(rn)){\n            this._releaseNumber = undefined;\n            return;\n        }\n        \n        // check the validity of the release number\n        if(!MoodleVersion.isReleaseNumber(rn, false)){\n            throw new TypeError('Release Numbers must be integers greater than or equal to zero');\n        }\n        \n        // set the branch number (coercing the empty string to 0)\n        this._releaseNumber = rn === '' ? 0 : parseInt(rn);\n    }\n    \n    /**\n     * The release's type, e.g. `'development'`.\n     *\n     * @type {ReleaseType|undefined}\n     */\n    get releaseType(){\n        return this._releaseType;\n    }\n    \n    /**\n     * The release type must be one of `'development'`, `'official'`, or\n     * `'weekly'`. The value will get automatically cast to lower case before\n     * validation is applied.\n     *\n     * @type {ReleaseType|undefined}\n     * @throws {TypeError}\n     */\n    set releaseType(rt){\n        const errMsg = \"release type must be one of 'development', 'official', or 'weekly'\";\n        if(is.not.string(rt)) throw new TypeError(errMsg);\n        rt = rt.toLowerCase();\n        if(!MoodleVersion.isReleaseType(rt)) throw new TypeError(errMsg);\n        this._releaseType = rt;\n    }\n    \n    /**\n     * The release suffix for the release's type, e.g. `'+'` for weekly\n     * updates to the official releases.\n     *\n     * @type {ReleaseSuffix|undefined}\n     */\n    get releaseSuffix(){\n        return MoodleVersion.releaseSuffixFromReleaseType(this._releaseType);\n    }\n    \n    /**\n     * The release suffix must be one of `'dev'`, an empty string, or `'+'`. The\n     * value will get automatically cast to lower case before validation is\n     * applied.\n     *\n     * @type {ReleaseSuffix|undefined}\n     * @throws {TypeError}\n     */\n    set releaseSuffix(rs){\n        const errMsg = \"release suffix must be one of 'dev', '', or '+'\";\n        if(is.not.string(rs)) throw new TypeError(errMsg);\n        rs = rs.toLowerCase();\n        if(!MoodleVersion.isReleaseSuffix(rs)) throw new TypeError(errMsg);\n        this._releaseType = MoodleVersion.releaseTypeFromReleaseSuffix(rs);\n    }\n    \n    /**\n     * The build number.\n     *\n     * @type {BuildNumber|undefined}\n     */\n    get buildNumber(){\n        return this._buildNumber;\n    }\n    \n    /**\n     * Build numbers must be valid date numbers, i.e. of the form `YYYYMMDD`.\n     *\n     * @type {ReleaseSuffix|undefined}\n     * @throws {TypeError}\n     */\n    set buildNumber(bn){\n        // short-circuit setting to undefined\n        if(is.undefined(bn)){\n            this._buildNumber = undefined;\n            return;\n        }\n        \n        // make sure we got valid data\n        if(!MoodleVersion.isDateNumber(bn)) throw new TypeError('build number must be of the form YYYYMMDD');\n        \n        // store the build number\n        this._buildNumber = parseInt(bn);\n    }\n    \n    /**\n     * The short human-friendly form of the version number.\n     *\n     * In keeping with how Moodle presents version strings, release numbers of\n     * zero are omitted. If the release type is unknown no suffix is appended.\n     * If the branch is unknown it is represented as `'??.??'`, and if the\n     * release number is unknown it's represented as `'.??'`.\n     *\n     * @type {VersionString}\n     */\n    get version(){\n        let ans = is.undefined(this.branch) ? '??.??' : this.branch;\n        if(this.releaseNumber !== 0) ans += `.${TO_STR(this.releaseNumber)}`;\n        if(is.string(this.releaseSuffix)) ans += this.releaseSuffix;\n        return ans;\n    }\n    \n    /**\n     * The under-the-hood form of the version number.\n     *\n     * If the branch is unknown its replaced with eight question marks, and if\n     * the release number is unknown it's replaced with two.\n     *\n     * @type {VersionNumber}\n     */\n    get versionNumber(){\n        let ans = is.undefined(this.branchingDateNumber) ? '????????' : TO_STR(this.branchingDateNumber);\n        ans += `${this.releaseNumber < 10 ? '0' : ''}${TO_STR(this.releaseNumber)}`;\n        return ans;\n    }\n    \n    /**\n     * The long human-friendly form of the version information.\n     *\n     * In keeping with how Moodle presents version strings, release numbers of\n     * zero are omitted. If the release type is unknown no suffix is appended.\n     * If the branch is unknown it is represented as `'??.??'`, if the\n     * release number is unknown it's represented as `'.??'`, and if the build\n     * number is unknown it's represented as `'????????'`.\n     *\n     * @type {ReleaseString}\n     */\n    get release(){\n        return `${this.version} (Build: ${is.undefined(this.buildNumber) ? '????????' : this.buildNumber})`;\n    }\n\n    /**\n     * Create a new Moodle version object representing the same version\n     * information.\n     *\n     * @return {MoodleVersion}\n     */\n    clone(){\n        return MoodleVersion.fromObject({\n            branchNumber: this._branchNumber,\n            branchingDateNumber: this._branchingDateNumber,\n            releaseNumber: this._releaseNumber,\n            releaseType: this._releaseType,\n            buildNumber: this._buildNumber\n        });\n    }\n    \n    /**\n     * Return a string representation of the version. The output will be of the\n     * form `B.B.R[S] (type: T, branching date: BD & build: BN)`, e.g.\n     * `3.3.6 (type: official, branching date: 20170515 & build: 20180517)`.\n     * Undefined components will be rendered as `??`.\n     *\n     * @return {string}\n     */\n    toString(){\n        let ans = `${is.undefined(this.branch) ? '??.??' : this.branch }.${TO_STR(this.releaseNumber)}`;\n        if(is.string(this.releaseSuffix)) ans += this.releaseSuffix;\n        ans += ` (type: ${TO_STR(this.releaseType)}, branching date: ${TO_STR(this.branchingDateNumber)} & build: ${TO_STR(this.buildNumber)})`;\n        return ans;\n    }\n    \n    /**\n     * The version as a plain object indexed by zero or more of:\n     *\n     * * `version`\n     * * `versionNumber`\n     * * `release`\n     * * `branch`\n     * * `branchNumber`\n     * * `branchingDateNumber`\n     * * `branchingDate`\n     * * `releaseNumber`\n     * * `releaseType`\n     * * `releaseSuffix`\n     * * `buildNumber`\n     *\n     * @return {Object}\n     */\n    toObject(){\n        return {\n            version: this.version,\n            versionNumber: this.versionNumber,\n            release: this.release,\n            branch: this.branch,\n            branchNumber: this.branchNumber,\n            branchingDateNumber: this.branchingDateNumber,\n            branchingDate: this.branchingDate,\n            releaseNumber: this.releaseNumber,\n            releaseType: this.releaseType,\n            releaseSuffix: this.releaseSuffix,\n            buildNumber: this.buildNumber\n        };\n    }\n\n    /**\n     * An object containing a SemVer\n     * ([Semantic Versioning](https://semver.org)) representation of the\n     * version information.\n     * \n     * @return {{major: number, minor: number, patch: number}} \n     */\n    toSemVerObject(){\n        const ans = {\n            major: 0,\n            minor: 0,\n            patch: 0\n        }\n        if(this.branch){\n            const branchParts = this.branch.split('.');\n            ans.major = parseInt(branchParts[0]);\n            ans.minor = parseInt(branchParts[1]);\n        }\n        if(this.releaseNumber){\n            ans.patch = this.releaseNumber;\n        }\n        return ans;\n    }\n\n    /**\n     * An array containing a SemVer\n     * ([Semantic Versioning](https://semver.org)) representation of the\n     * version information. The first element will be the major version number,\n     * the second the minor, and the third the patch.\n     * \n     * @return {Array<number>} An array of three integers. \n     */\n    toSemVerArray(){\n        const semVer = this.toSemVerObject()\n        return [semVer.major, semVer.minor, semVer.patch];\n    }\n    \n    /**\n     * Test if a given value is a Moodle Version object representing the same\n     * version.\n     *\n     * @param {*} val\n     * @return {boolean}\n     */\n    equals(val){\n        return MoodleVersion.compare(this, val) === 0 ? true : false;\n    }\n    \n    /**\n     * Compare this version to another.\n     *\n     * @param {MoodleVersion} mv\n     * @return {number} `-1` returned if passed version is lesser, `0` if the\n     * passed version is the same, and `1` if the passed version is greater. If\n     * the passed value is not a Moodle version object, `NaN` will be returned.\n     */\n    compareTo(mv){\n        return MoodleVersion.compare(mv, this);\n    }\n    \n    /**\n     * Determine whether this versions is on the same branch as a given version.\n     *\n     * @param {MoodleVersion} mv\n     * @return {boolean|undefined} If the two versions share a branch then\n     * `true` is returned, if the branch numbers differ, `false` is returned.\n     * If the value passed is not a Moodle version object, or, the branch\n     * is undefined in both versions, `undefined` is returned.\n     */\n    sameBranch(mv){\n        if(!(mv instanceof MoodleVersion)) return undefined;\n        if(is.all.undefined(this.branch, mv.branch)) return undefined;\n        return this.branch === mv.branch;\n    }\n    \n    /**\n     * Determine whether this version is less than a given version.\n     *\n     * @param {MoodleVersion} mv\n     * @return {boolean|undefined} If the version is definitely lesser then\n     * `true` is returned, and if the version is equal or definitely greater\n     * then `false` is returned. If the value is not a Moodle version object\n     * then `undefined` is returned.\n     */\n    lessThan(mv){\n        const cmp = MoodleVersion.compare(this, mv);\n        if(is.nan(cmp)) return undefined;\n        return cmp === -1 ? true : false;\n    }\n    \n    /**\n     * Determine whether this version is greater than a given version.\n     *\n     * @param {MoodleVersion} mv\n     * @return {boolean|undefined} If the version is definitely greater then\n     * `true` is returned, and if the version is equal or definitely less than\n     * then `false` is returned. If the value is not a Moodle version object\n     * then `undefined` is returned.\n     */\n    greaterThan(mv){\n        const cmp = MoodleVersion.compare(this, mv);\n        if(is.nan(cmp)) return undefined;\n        return cmp === 1 ? true : false;\n    }\n\n    /**\n     * Determine whether this version is greater than or equal to the given version.\n     *\n     * @param {MoodleVersion} mv\n     * @return {boolean|undefined} If the version is definitely greater or\n     * equal then `true` is returned, and if the version is definitely less\n     * than then `false` is returned. If the value is not a Moodle version\n     * object then `undefined` is returned.\n     */\n    atLeast(mv){\n       const cmp = MoodleVersion.compare(this, mv);\n       if(is.nan(cmp)) return undefined;\n       return cmp >= 0 ? true : false;\n    }\n    \n    /**\n     * Is this a stable release? I.e. is the release type `official` or\n     * `weekly`?\n     *\n     * @return {boolean|undefined} Both official and weekly releases are\n     * considered stable, while development releases are not. If the release\n     * type is not defined, `undefined` is returned.\n     */\n    isStable(){\n        if(is.undefined(this.releaseType)) return undefined;\n        return this.releaseType === 'official' || this.releaseType === 'weekly' ? true : false;\n    }\n    \n    /**\n     * Is this version on a branch the library knows about?\n     *\n     * @return {boolean}\n     */\n    isKnownBranch(){\n        return is.not.undefined(BNUM_BDNUM_MAP[this.branchNumber]);\n    }\n    \n    /**\n     * Determine whether or not this is version is on a long-term support\n     * branch. If the branch is not defined or unknown, `undefined` is returned.\n     *\n     * @return {boolean|undefined}\n     */\n    isLTS(){\n        if(is.undefined(this.branchNumber)) return undefined;\n        if(!this.isKnownBranch()) return undefined;\n        return is.not.undefined(BNUM_LTS_LOOKUP[this.branchNumber]);\n    }\n}\n\nexport default MoodleVersion;",
    "static": true,
    "longname": "/Users/bbusschots/Documents/Temp/From MU GitHub/moodle-version/src/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "typedef",
    "name": "VersionString",
    "memberof": "src/index.js",
    "static": true,
    "longname": "src/index.js~VersionString",
    "access": "public",
    "description": "A Moodle version string. These are the version numbers used on the\n[Moodle download page](https://download.moodle.org/releases/latest/) and\ndisplayed in the footer of the Moodle admin area.\n\nMoodle version strings generally consist of the branch string separated from\nthe release number by a period. The initial release for a given branch is\ngiven the release number zero, which may be omitted. Alpha and Beta releases\nhave `dev` appended, and weekly releases have a plus symbol appended.\n\nFor example, all the development releases of the Moodle 3.5 branch have the\nversion string `3.5dev`, the initial release is `3.5`, the\nfirst update release is `3.5.1`, and all weekly releases between the\nrelease of `3.5.1` and `3.5.2` share `3.5.1+`.",
    "examples": [
      "'3.5dev'",
      "'3.5'",
      "'3.5+'",
      "'3.5.1'",
      "'3.5.1+'"
    ],
    "type": {
      "types": [
        "string"
      ],
      "optional": false,
      "name": "VersionString"
    }
  },
  {
    "__docId__": 50,
    "kind": "typedef",
    "name": "VersionNumber",
    "memberof": "src/index.js",
    "static": true,
    "longname": "src/index.js~VersionNumber",
    "access": "public",
    "description": "A moodle version number. These version numbers are used under-the-hood in\nthe Moodle source code. They consist of the branch's branch date number\nfollowed by the release number, optionally followed by a period and an\nincremental change number.\n\nFor example, the Moodle 3.3.6 release has the version number `2017051506.00`.\nThe branch date number for Moodle 3.3 is `20170515` (a {@link DateNumber}),\nwhich is then followed by the two-digit form of the release number, `06`, and\nan incremental change number of `00`.",
    "examples": [
      "'2017051506.00'"
    ],
    "see": [
      "DateNumber"
    ],
    "type": {
      "types": [
        "string",
        "number"
      ],
      "optional": false,
      "name": "VersionNumber"
    }
  },
  {
    "__docId__": 51,
    "kind": "typedef",
    "name": "BranchString",
    "memberof": "src/index.js",
    "static": true,
    "longname": "src/index.js~BranchString",
    "access": "public",
    "description": "A Moodle branch string. These are the human-friendly major-version numbers\nused throught the official Moodle documentation. They take the form of two\nsets of digits separated by a period, e.g. `3.5` or `3.10`.",
    "examples": [
      "'3.5'"
    ],
    "type": {
      "types": [
        "string"
      ],
      "optional": false,
      "name": "BranchString"
    }
  },
  {
    "__docId__": 52,
    "kind": "typedef",
    "name": "BranchNumber",
    "memberof": "src/index.js",
    "static": true,
    "longname": "src/index.js~BranchNumber",
    "access": "public",
    "description": "A Moodle branch number. These are used under-the-hood to represent Moodel\nbranches within the Moodle code. They take the form of a (usuall) two-digit\ninteger number - the human-friendly branch without the period e.g. Moodle\n3.5 has a branch number of `35`. The exception being Moodle 3.10 which has a\nbranch number of 310.",
    "examples": [
      "35"
    ],
    "see": [
      "BranchString"
    ],
    "type": {
      "types": [
        "number",
        "string"
      ],
      "optional": false,
      "name": "BranchNumber"
    }
  },
  {
    "__docId__": 53,
    "kind": "typedef",
    "name": "ReleaseString",
    "memberof": "src/index.js",
    "static": true,
    "longname": "src/index.js~ReleaseString",
    "access": "public",
    "description": "A Moodle release string. These are the release strings Moodle's documentation\ndescribes as *human friendly*. They are used in the following contexts:\n\n1. The admin section of web interface\n2. The CLI command `admin/cli/cfg.php --name=release`\n3. The variable `$release` in `version.php`\n\nIn some contexts they're pre-fixed with the word *Moodle*, in others they're\nnot.\n\nExamples:\n\n* `'3.3.6 (Build: 20180517)'` - the offical Moodle 3.3.6 release.\n* `'Moodle 3.5+ (Build: 20180614)'` - a weekly Moodle 3.5.0 release.",
    "examples": [
      "'3.3.6 (Build: 20180517)'"
    ],
    "see": [
      "VersionString"
    ],
    "type": {
      "types": [
        "string"
      ],
      "optional": false,
      "name": "ReleaseString"
    }
  },
  {
    "__docId__": 54,
    "kind": "typedef",
    "name": "ReleaseNumber",
    "memberof": "src/index.js",
    "static": true,
    "longname": "src/index.js~ReleaseNumber",
    "access": "public",
    "description": "An integer representing an offical Moodle release within a branch. The\ninitial release of any branch has the release number 0, subsequent offical\nupdate releases then count up from there.",
    "type": {
      "types": [
        "number",
        "string"
      ],
      "optional": false,
      "name": "ReleaseNumber"
    }
  },
  {
    "__docId__": 55,
    "kind": "typedef",
    "name": "ReleaseType",
    "memberof": "src/index.js",
    "static": true,
    "longname": "src/index.js~ReleaseType",
    "access": "public",
    "description": "Moodle releases are categoriesed into one of three types:\n\n1. Development releases, both betas and alphas.\n2. Official stable releases.\n3. Weekly updates to official stable releases.\n\nThese three values are represented as `'development'`, `'official'`, and\n`'weekly'`.",
    "type": {
      "types": [
        "string"
      ],
      "optional": false,
      "name": "ReleaseType"
    }
  },
  {
    "__docId__": 56,
    "kind": "typedef",
    "name": "ReleaseSuffix",
    "memberof": "src/index.js",
    "static": true,
    "longname": "src/index.js~ReleaseSuffix",
    "access": "public",
    "description": "A release suffix is used to indicate the release type in some Moodle version\nstrings. Possible values are:\n\n* `'dev'` for development releases.\n* `''` (an empty string) for official stable releases.\n* `+` for weekly updates to official stable releases.",
    "type": {
      "types": [
        "string"
      ],
      "optional": false,
      "name": "ReleaseSuffix"
    }
  },
  {
    "__docId__": 57,
    "kind": "typedef",
    "name": "BuildNumber",
    "memberof": "src/index.js",
    "static": true,
    "longname": "src/index.js~BuildNumber",
    "access": "public",
    "description": "Each released moodle build, both the weeklys and the offical updates are\nassigned a build number which takes the form of a {@link DateNumber}.",
    "type": {
      "types": [
        "DateNumber"
      ],
      "optional": false,
      "name": "BuildNumber"
    }
  },
  {
    "__docId__": 58,
    "kind": "typedef",
    "name": "DateNumber",
    "memberof": "src/index.js",
    "static": true,
    "longname": "src/index.js~DateNumber",
    "access": "public",
    "description": "An 8-digit date representation used within a number of Moodle version\nidentifiers. The first four digits represent the year, the next two the\nmonth and the last two the day of the month.\n\nFor example, Christmas 2018 has the date number `20181225`.",
    "examples": [
      "'20181225'"
    ],
    "type": {
      "types": [
        "string",
        "number"
      ],
      "optional": false,
      "name": "DateNumber"
    }
  },
  {
    "__docId__": 59,
    "kind": "variable",
    "name": "BNUM_BDNUM_MAP",
    "memberof": "src/index.js",
    "static": true,
    "longname": "src/index.js~BNUM_BDNUM_MAP",
    "access": "protected",
    "export": false,
    "importPath": "@maynoothuniversity/moodle-version/src/index.js",
    "importStyle": null,
    "description": "A mapping form branch numbers to branching date numbers.",
    "lineNumber": 140,
    "type": {
      "nullable": null,
      "types": [
        "Map<BranchNumber, DateNumber>"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 60,
    "kind": "variable",
    "name": "BDNUM_BNUM_MAP",
    "memberof": "src/index.js",
    "static": true,
    "longname": "src/index.js~BDNUM_BNUM_MAP",
    "access": "protected",
    "export": false,
    "importPath": "@maynoothuniversity/moodle-version/src/index.js",
    "importStyle": null,
    "description": "A mapping form branching date numbers to branch numbers.",
    "lineNumber": 172,
    "type": {
      "nullable": null,
      "types": [
        "Map<DateNumber, BranchNumber>"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 61,
    "kind": "variable",
    "name": "LTS_BNUMS",
    "memberof": "src/index.js",
    "static": true,
    "longname": "src/index.js~LTS_BNUMS",
    "access": "protected",
    "export": false,
    "importPath": "@maynoothuniversity/moodle-version/src/index.js",
    "importStyle": null,
    "description": "A list of LTS (Long-Term Support) branch numbers.",
    "lineNumber": 183,
    "type": {
      "nullable": null,
      "types": [
        "Array<number>"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 62,
    "kind": "variable",
    "name": "BNUM_LTS_LOOKUP",
    "memberof": "src/index.js",
    "static": true,
    "longname": "src/index.js~BNUM_LTS_LOOKUP",
    "access": "protected",
    "export": false,
    "importPath": "@maynoothuniversity/moodle-version/src/index.js",
    "importStyle": null,
    "description": "A lookup table to test if a given branch number is a long-term support (LTS)\nbranch. This lookup table is generated from {@link LTS_BNUMS}.",
    "see": [
      "LTS_BNUMS"
    ],
    "lineNumber": 193,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 63,
    "kind": "function",
    "name": "TO_STR",
    "memberof": "src/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/index.js~TO_STR",
    "access": "private",
    "export": false,
    "importPath": "@maynoothuniversity/moodle-version/src/index.js",
    "importStyle": null,
    "description": "Convert a value to a string for use in string representations of the\nversion. `undefined` is returned as `'??'` and all other values are\nconverted to a string with JavaScript's `String()` function.",
    "lineNumber": 207,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "val",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 64,
    "kind": "class",
    "name": "MoodleVersion",
    "memberof": "src/index.js",
    "static": true,
    "longname": "src/index.js~MoodleVersion",
    "access": "public",
    "export": true,
    "importPath": "@maynoothuniversity/moodle-version/src/index.js",
    "importStyle": "MoodleVersion",
    "description": "A class for parsing and representing\n[version information](https://docs.moodle.org/35/en/Moodle_version) for the\n[Moodle VLE](http://moodle.org/).\n\nThe class can parse both the human-friendly Moodle release strings like\n`3.3.6 (Build: 20180517)`, and the underlying raw version numbers like\n`2017051506`.\n\nNote that this class only reliably understands version information from\nMoodle 2.2 up. The reason for this limitation is that this is the first\nMoodle version which uses the now standard versioning conventions.",
    "see": [
      "https://docs.moodle.org/35/en/Moodle_version",
      "https://docs.moodle.org/dev/Releases"
    ],
    "lineNumber": 227,
    "interface": false
  },
  {
    "__docId__": 65,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/index.js~MoodleVersion",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~MoodleVersion#constructor",
    "access": "public",
    "description": "By default version objects contain no information.\n\nIf a string is passed, the object is initialised using\n{@link MoodleVersion.fromString}, and if an object is passed then\n{@link MoodleVersion.fromObject} is used instead.",
    "lineNumber": 239,
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "versionInfo",
        "description": ""
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "TypeError"
      },
      {
        "types": [
          "*"
        ],
        "description": "RangeError"
      }
    ]
  },
  {
    "__docId__": 66,
    "kind": "member",
    "name": "_branchNumber",
    "memberof": "src/index.js~MoodleVersion",
    "static": false,
    "longname": "src/index.js~MoodleVersion#_branchNumber",
    "access": "private",
    "description": "",
    "lineNumber": 254,
    "type": {
      "nullable": null,
      "types": [
        "BranchNumber",
        "undefined"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 68,
    "kind": "member",
    "name": "_branchingDateNumber",
    "memberof": "src/index.js~MoodleVersion",
    "static": false,
    "longname": "src/index.js~MoodleVersion#_branchingDateNumber",
    "access": "private",
    "description": "",
    "lineNumber": 260,
    "type": {
      "nullable": null,
      "types": [
        "DateNumber",
        "undefined"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 70,
    "kind": "member",
    "name": "_releaseNumber",
    "memberof": "src/index.js~MoodleVersion",
    "static": false,
    "longname": "src/index.js~MoodleVersion#_releaseNumber",
    "access": "private",
    "description": "",
    "lineNumber": 266,
    "type": {
      "nullable": null,
      "types": [
        "ReleaseNumber",
        "undefined"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 72,
    "kind": "member",
    "name": "_releaseType",
    "memberof": "src/index.js~MoodleVersion",
    "static": false,
    "longname": "src/index.js~MoodleVersion#_releaseType",
    "access": "private",
    "description": "",
    "lineNumber": 272,
    "type": {
      "nullable": null,
      "types": [
        "ReleaseType",
        "undefined"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 74,
    "kind": "member",
    "name": "_buildNumber",
    "memberof": "src/index.js~MoodleVersion",
    "static": false,
    "longname": "src/index.js~MoodleVersion#_buildNumber",
    "access": "private",
    "description": "",
    "lineNumber": 278,
    "type": {
      "nullable": null,
      "types": [
        "BuildNumber",
        "undefined"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 76,
    "kind": "method",
    "name": "isDateNumber",
    "memberof": "src/index.js~MoodleVersion",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/index.js~MoodleVersion.isDateNumber",
    "access": "public",
    "description": "Test if a given value is a date number, i.e. an 8-digit number of the\nform `YYYYMMDD`.",
    "lineNumber": 292,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "val",
        "description": "the value to test."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "strictTypeCheck",
        "description": "whether or not to enable\nstrict type checking. With strict type cheking enabled, string\nrepresentation of otherwise valid values will return `false`."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 77,
    "kind": "method",
    "name": "isBranch",
    "memberof": "src/index.js~MoodleVersion",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/index.js~MoodleVersion.isBranch",
    "access": "public",
    "description": "Test if a given value is a branch string, e.g. `'3.5'` or `'3.10'`.",
    "lineNumber": 306,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "val",
        "description": "the value to test."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 78,
    "kind": "method",
    "name": "isBranchNumber",
    "memberof": "src/index.js~MoodleVersion",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/index.js~MoodleVersion.isBranchNumber",
    "access": "public",
    "description": "Test if a given value is a branch number, e.g. `35`, `'35'`, `310` or\n`'310'.",
    "lineNumber": 320,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "val",
        "description": "the value to test."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "strictTypeCheck",
        "description": "whether or not to enable\nstrict type checking. With strict type cheking enabled, string\nrepresentation of otherwise valid values will return `false`."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 79,
    "kind": "method",
    "name": "isReleaseNumber",
    "memberof": "src/index.js~MoodleVersion",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/index.js~MoodleVersion.isReleaseNumber",
    "access": "public",
    "description": "Test if a given value is a release number.\n\nNote that if strict type checking is not enabled, the empty string is\nconsidered a valid release number, being synonymous with zero in\nMoodle release strings.",
    "lineNumber": 341,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "val",
        "description": "the value to test."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "strictTypeCheck",
        "description": "whether or not to enable\nstrict type checking. With strict type cheking enabled, string\nrepresentation of otherwise valid values will return `false`."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 80,
    "kind": "method",
    "name": "isReleaseType",
    "memberof": "src/index.js~MoodleVersion",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/index.js~MoodleVersion.isReleaseType",
    "access": "public",
    "description": "Test if a given value is a valid release type.",
    "see": [
      "ReleaseType"
    ],
    "lineNumber": 356,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "val",
        "description": "the value to test."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 81,
    "kind": "method",
    "name": "isReleaseSuffix",
    "memberof": "src/index.js~MoodleVersion",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/index.js~MoodleVersion.isReleaseSuffix",
    "access": "public",
    "description": "Test if a given value is a valid release suffix.",
    "see": [
      "ReleaseSuffix"
    ],
    "lineNumber": 367,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "val",
        "description": "the value to test."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 82,
    "kind": "method",
    "name": "branchFromBranchNumber",
    "memberof": "src/index.js~MoodleVersion",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/index.js~MoodleVersion.branchFromBranchNumber",
    "access": "public",
    "description": "Convert a branch number into a branch string, i.e. `35` to `'3.5'` and\n`310` to `'3.10'`.",
    "lineNumber": 379,
    "params": [
      {
        "nullable": null,
        "types": [
          "BranchNumber"
        ],
        "spread": false,
        "optional": false,
        "name": "bn",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BranchString",
        "undefined"
      ],
      "spread": false,
      "description": "If the passed value can't be converted\nto a branch `undefined` is returned."
    }
  },
  {
    "__docId__": 83,
    "kind": "method",
    "name": "branchFromBranchingDateNumber",
    "memberof": "src/index.js~MoodleVersion",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/index.js~MoodleVersion.branchFromBranchingDateNumber",
    "access": "public",
    "description": "Convert a branching date number to a branch, e.g. `20180517` to\n`'3.5'`.",
    "lineNumber": 397,
    "params": [
      {
        "nullable": null,
        "types": [
          "DateNumber"
        ],
        "spread": false,
        "optional": false,
        "name": "bdn",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BranchString",
        "undefined"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 84,
    "kind": "method",
    "name": "branchNumberFromBranch",
    "memberof": "src/index.js~MoodleVersion",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/index.js~MoodleVersion.branchNumberFromBranch",
    "access": "public",
    "description": "Convert a branch string into a branch number, i.e. `'3.5'` to `35`.",
    "lineNumber": 412,
    "params": [
      {
        "nullable": null,
        "types": [
          "BranchString"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number",
        "undefined"
      ],
      "spread": false,
      "description": "If the passed value can't be converted\nto a branch number `undefined` is returned."
    }
  },
  {
    "__docId__": 85,
    "kind": "method",
    "name": "branchNumberFromBranchingDateNumber",
    "memberof": "src/index.js~MoodleVersion",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/index.js~MoodleVersion.branchNumberFromBranchingDateNumber",
    "access": "public",
    "description": "Convert a branching date number to a branch number, e.g. `20180517` to\n`35`.",
    "lineNumber": 429,
    "params": [
      {
        "nullable": null,
        "types": [
          "DateNumber"
        ],
        "spread": false,
        "optional": false,
        "name": "bdn",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number",
        "undefined"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 86,
    "kind": "method",
    "name": "branchingDateNumberFromBranch",
    "memberof": "src/index.js~MoodleVersion",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/index.js~MoodleVersion.branchingDateNumberFromBranch",
    "access": "public",
    "description": "Convert a branch to a branching date number, e.g. `'3.5'` to `20180517`.",
    "lineNumber": 441,
    "params": [
      {
        "nullable": null,
        "types": [
          "BranchString"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number",
        "undefined"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 87,
    "kind": "method",
    "name": "branchingDateNumberFromBranchNumber",
    "memberof": "src/index.js~MoodleVersion",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/index.js~MoodleVersion.branchingDateNumberFromBranchNumber",
    "access": "public",
    "description": "Convert a branch number to a branching date number, e.g. `35` to `20180517`.",
    "lineNumber": 454,
    "params": [
      {
        "nullable": null,
        "types": [
          "BranchNumber"
        ],
        "spread": false,
        "optional": false,
        "name": "bn",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number",
        "undefined"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 88,
    "kind": "method",
    "name": "dateFromDateNumber",
    "memberof": "src/index.js~MoodleVersion",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/index.js~MoodleVersion.dateFromDateNumber",
    "access": "public",
    "description": "Convert a date number to a date object. The date object will represent\nmidnight UTC on the given date.",
    "lineNumber": 467,
    "params": [
      {
        "nullable": null,
        "types": [
          "DateNumber"
        ],
        "spread": false,
        "optional": false,
        "name": "dn",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Date"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "TypeError"
        ],
        "description": ""
      }
    ]
  },
  {
    "__docId__": 89,
    "kind": "method",
    "name": "dateNumberFromDate",
    "memberof": "src/index.js~MoodleVersion",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/index.js~MoodleVersion.dateNumberFromDate",
    "access": "public",
    "description": "Convert a date object to a date number. The date will be interpreted as\nUTC.",
    "lineNumber": 481,
    "params": [
      {
        "nullable": null,
        "types": [
          "Date"
        ],
        "spread": false,
        "optional": false,
        "name": "d",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "DateNumber"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "TypeError"
        ],
        "description": ""
      }
    ]
  },
  {
    "__docId__": 90,
    "kind": "method",
    "name": "releaseSuffixFromReleaseType",
    "memberof": "src/index.js~MoodleVersion",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/index.js~MoodleVersion.releaseSuffixFromReleaseType",
    "access": "public",
    "description": "Convert a release type to a release suffix, e.g. `'weekly'` to `'+'`.",
    "lineNumber": 496,
    "params": [
      {
        "nullable": null,
        "types": [
          "ReleaseType"
        ],
        "spread": false,
        "optional": false,
        "name": "rt",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ReleaseSuffix",
        "undefined"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 91,
    "kind": "method",
    "name": "releaseTypeFromReleaseSuffix",
    "memberof": "src/index.js~MoodleVersion",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/index.js~MoodleVersion.releaseTypeFromReleaseSuffix",
    "access": "public",
    "description": "Convert a relase suffix to a release type, e.g. `'+'` to `'weekly'`.",
    "lineNumber": 515,
    "params": [
      {
        "nullable": null,
        "types": [
          "ReleaseSuffix"
        ],
        "spread": false,
        "optional": false,
        "name": "rs",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ReleaseType",
        "undefined"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 92,
    "kind": "method",
    "name": "numberFromReleaseType",
    "memberof": "src/index.js~MoodleVersion",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/index.js~MoodleVersion.numberFromReleaseType",
    "access": "public",
    "description": "Convert a release type to a number. Useful for version comparisons.\n\nAll invalid values convert to `0`, `'development'` to `1`, `'official'`\nto `2`, and `'weekly'` to 3.",
    "lineNumber": 537,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "rt",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 93,
    "kind": "method",
    "name": "compare",
    "memberof": "src/index.js~MoodleVersion",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/index.js~MoodleVersion.compare",
    "access": "public",
    "description": "Compare two values to see if they represent the same version, a\ngreater version, or a lesser version.\n\nWhen ranking versions, the branch is given the highest weight, then the\nrelease number, then the release type,\nand finally the build number. When comparing release types,\n`'development'` is considered earlier `'official'`, which is considered\nearlier than `'weekly'`.",
    "lineNumber": 564,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "val1",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "val2",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "Unless both values are moodle vesion objects, `NaN` is\nreturned. If `val1` represents an earlier version than `val2` `-1` is\nreturned, if `val1` and `val2` represent the same version `0` is\nreturned, and if `val1` represents a later version than `val2` `1` is\nreturned."
    }
  },
  {
    "__docId__": 94,
    "kind": "method",
    "name": "fromObject",
    "memberof": "src/index.js~MoodleVersion",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/index.js~MoodleVersion.fromObject",
    "access": "public",
    "description": "A factory method for producing a Moodle Version object given all its\nproperties.\n\nIf only one of the branch and branching date are passed, and if a known\nmapping exists, the other is auto-completed.\n\nThis function can be used to create version objects which contain\nunknown mappings between Moodle branches and branching dates.",
    "lineNumber": 620,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": "an object defining zero or more of the following\nkeys:\n\n* `branch` (e.g. `'3.5'`) or `branchNumber` (e.g. `35`) - if both are\n  specified `branchNumber` takes precedence.\n* `branchingDate` or `branchingDateNumber` - if both are specified\n  `branchingDateNumber` takes precedence.\n* `releaseNumber`\n* `releaseType` (e.g. `'weekly'`) or `releaseSuffix` (e.g. `'+'`) - if\n  both are specified, `releaseSuffix` takes precedence\n* `buildNumber`"
      }
    ],
    "throws": [
      {
        "types": [
          "TypeError"
        ],
        "description": "A type error is thrown if an object is not passed,\nor, if any of the keys within that object map to an invalid value."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 95,
    "kind": "get",
    "name": "releaseRE",
    "memberof": "src/index.js~MoodleVersion",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/index.js~MoodleVersion.releaseRE",
    "access": "public",
    "description": "A regular expression for matching human-friendly Moodle release strings.\nThis RE is case-insensitive and will allow for the optional pre-fixing of\nthe word *Moodle* with or whithout a separating space.",
    "see": [
      "{@link ReleaseString}"
    ],
    "lineNumber": 691,
    "type": {
      "nullable": null,
      "types": [
        "RegExp"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 96,
    "kind": "get",
    "name": "versionRE",
    "memberof": "src/index.js~MoodleVersion",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/index.js~MoodleVersion.versionRE",
    "access": "public",
    "description": "A regular expression for matching short version strings like `'3.5+'` (as\nused on the Moodle download page). This RE is case-insensitive and will\nallow for the optional pre-fixing of the word *Moodle* with or whithout\na separating space.",
    "see": [
      "{@link VersionString}"
    ],
    "lineNumber": 704,
    "type": {
      "nullable": null,
      "types": [
        "RegExp"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 97,
    "kind": "get",
    "name": "versionNumberRE",
    "memberof": "src/index.js~MoodleVersion",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/index.js~MoodleVersion.versionNumberRE",
    "access": "public",
    "description": "A regular expression for matching under-the-hood version numbers like\n`'2017051506'` or `'2017051506.00'`.",
    "see": [
      "{@link VersionNumber}"
    ],
    "lineNumber": 715,
    "type": {
      "nullable": null,
      "types": [
        "RegExp"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 98,
    "kind": "method",
    "name": "fromString",
    "memberof": "src/index.js~MoodleVersion",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/index.js~MoodleVersion.fromString",
    "access": "public",
    "description": "Build a version object from a version string. The vesion string can be\nin one of the following formats:\n\n* A human-friendly full release string ({@link ReleaseString}), e.g.\n  `'Moodle 3.5+ (Build: 20180614)'` (will be accepted with or without\n  the `'Moodle'` prefix).\n* A human-friendly short version string ({@link VersionString}), e.g.\n `'Moodle 3.3.6+'` (will be accepted with or without the `'Moodle'`\n prefix).\n* An under-the-hood version number ({@link VersionNumber}), e.g.\n* `'2017051506'` or `'2017051506.00'`.\n* A string as returned by calling `.toString()` on an instance of this\n  class.",
    "see": [
      "{@link ReleaseString}",
      "{@link VersionString}",
      "{@link VersionNumber}",
      "{@link MoodleVersion#toString}"
    ],
    "lineNumber": 743,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "verStr",
        "description": "the version string to parse."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "MoodleVersion"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "TypeError"
        ],
        "description": ""
      },
      {
        "types": [
          "RangeError"
        ],
        "description": ""
      }
    ]
  },
  {
    "__docId__": 99,
    "kind": "get",
    "name": "branchNumber",
    "memberof": "src/index.js~MoodleVersion",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~MoodleVersion#branchNumber",
    "access": "public",
    "description": "The version's branch number, if known. This is the two-digit number\nused internally within the Moodle code to identify a branch, or major\nrelease.\n\nFor example, all Moodle 3.5.* releases will have the branch number `35`.",
    "lineNumber": 801,
    "type": {
      "nullable": null,
      "types": [
        "number",
        "undefined"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 100,
    "kind": "set",
    "name": "branchNumber",
    "memberof": "src/index.js~MoodleVersion",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~MoodleVersion#branchNumber",
    "access": "public",
    "description": "The branch number must be a two-digit integer between 10 and 99.\n\nSetting the branch number will also update the branching date to match.\n\nTo create an object with an un-known combination of branch and branching\ndate, use the {@link MoodleVersion.fromObject} factory method.",
    "lineNumber": 818,
    "type": {
      "nullable": null,
      "types": [
        "BranchNumber",
        "undefined"
      ],
      "spread": false,
      "description": null
    },
    "throws": [
      {
        "types": [
          "TypeError"
        ],
        "description": ""
      },
      {
        "types": [
          "RangeError"
        ],
        "description": "A range error is thrown if the branch does not have\na known mapping to a branching date."
      }
    ]
  },
  {
    "__docId__": 105,
    "kind": "get",
    "name": "branch",
    "memberof": "src/index.js~MoodleVersion",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~MoodleVersion#branch",
    "access": "public",
    "description": "The major version part of the version number, officially known as the\n*branch*.\n\nFor example, the branch for each of the 3.4, 3.4+, 3.4.1, and 3.4.1+\nreleases is `'3.4'`.",
    "lineNumber": 851,
    "type": {
      "nullable": null,
      "types": [
        "BranchString",
        "undefined"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 106,
    "kind": "set",
    "name": "branch",
    "memberof": "src/index.js~MoodleVersion",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~MoodleVersion#branch",
    "access": "public",
    "description": "The branch (AKA major version) must be a string consisting of two\ndigits separated by a period, e.g. `'3.5'`.\n\nSetting the branch will also update the branching date to match.\n\nTo create an object with an un-known combination of branch and branching\ndate, use the {@link MoodleVersion.fromObject} factory method.",
    "lineNumber": 870,
    "type": {
      "nullable": null,
      "types": [
        "BranchString"
      ],
      "spread": false,
      "description": null
    },
    "throws": [
      {
        "types": [
          "TypeError"
        ],
        "description": ""
      },
      {
        "types": [
          "RangeError"
        ],
        "description": "A range error is thrown if the branch does not have\na known mapping to a branching date."
      }
    ]
  },
  {
    "__docId__": 111,
    "kind": "get",
    "name": "branchingDate",
    "memberof": "src/index.js~MoodleVersion",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~MoodleVersion#branchingDate",
    "access": "public",
    "description": "The branching date as a date object.",
    "lineNumber": 900,
    "type": {
      "nullable": null,
      "types": [
        "Date",
        "undefined"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 112,
    "kind": "set",
    "name": "branchingDate",
    "memberof": "src/index.js~MoodleVersion",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~MoodleVersion#branchingDate",
    "access": "public",
    "description": "Setting the branching date will update the branch to match.\n\nTo create an object with an un-known combination of branch and branching\ndate, use the {@link MoodleVersion.fromObject} factory method.\n\n@type{Date|undefined}",
    "lineNumber": 916,
    "throws": [
      {
        "types": [
          "TypeError"
        ],
        "description": ""
      },
      {
        "types": [
          "RangeError"
        ],
        "description": "A range error is thrown if the branching date does\nnot have a known mapping to a branch."
      }
    ]
  },
  {
    "__docId__": 117,
    "kind": "get",
    "name": "branchingDateNumber",
    "memberof": "src/index.js~MoodleVersion",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~MoodleVersion#branchingDateNumber",
    "access": "public",
    "description": "The branching date as a {@link DateNumber}.",
    "lineNumber": 946,
    "type": {
      "nullable": null,
      "types": [
        "DateNumber",
        "undefined"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 118,
    "kind": "set",
    "name": "branchingDateNumber",
    "memberof": "src/index.js~MoodleVersion",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~MoodleVersion#branchingDateNumber",
    "access": "public",
    "description": "Setting the branching date will update the branch to match.\n\nTo create an object with an un-known combination of branch and branching\ndate, use the {@link MoodleVersion.fromObject} factory method.\n\n@type{DateNumber|undefined}",
    "lineNumber": 961,
    "throws": [
      {
        "types": [
          "TypeError"
        ],
        "description": ""
      },
      {
        "types": [
          "RangeError"
        ],
        "description": "A range error is thrown if the branching date does\nnot have a known mapping to a branch."
      }
    ]
  },
  {
    "__docId__": 123,
    "kind": "get",
    "name": "branchingDateNumbersByBranch",
    "memberof": "src/index.js~MoodleVersion",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~MoodleVersion#branchingDateNumbersByBranch",
    "access": "public",
    "description": "The known mappings between Moodle braches and branching date numbers.\n\n@type{Map<Branch, DateNumber>}",
    "lineNumber": 989,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 124,
    "kind": "get",
    "name": "branchingDateNumbersByBranchNumber",
    "memberof": "src/index.js~MoodleVersion",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~MoodleVersion#branchingDateNumbersByBranchNumber",
    "access": "public",
    "description": "The known mappings between Moodle brache numberss and branching date\nnumbers.\n\n@type{Map<BranchNumber, DateNumber>}",
    "lineNumber": 1003,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 125,
    "kind": "get",
    "name": "branchesByBranchingDateNumber",
    "memberof": "src/index.js~MoodleVersion",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~MoodleVersion#branchesByBranchingDateNumber",
    "access": "public",
    "description": "The known mappings between branching date numbers and Moodle branches.\n\n@type{Map<DateNumber, Branch>}",
    "lineNumber": 1016,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 126,
    "kind": "get",
    "name": "brancheNumbersByBranchingDateNumber",
    "memberof": "src/index.js~MoodleVersion",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~MoodleVersion#brancheNumbersByBranchingDateNumber",
    "access": "public",
    "description": "The known mappings between branching date numbers and Moodle branch\nnumbers.\n\n@type{Map<DateNumber, BranchNumber>}",
    "lineNumber": 1030,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 127,
    "kind": "get",
    "name": "releaseNumber",
    "memberof": "src/index.js~MoodleVersion",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~MoodleVersion#releaseNumber",
    "access": "public",
    "description": "The release number part of the version number.",
    "lineNumber": 1043,
    "type": {
      "nullable": null,
      "types": [
        "ReleaseNumber",
        "undefined"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 128,
    "kind": "set",
    "name": "releaseNumber",
    "memberof": "src/index.js~MoodleVersion",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~MoodleVersion#releaseNumber",
    "access": "public",
    "description": "The release number must be an integer greater than or equal to zero.",
    "lineNumber": 1053,
    "type": {
      "nullable": null,
      "types": [
        "ReleaseNumber",
        "undefined"
      ],
      "spread": false,
      "description": null
    },
    "throws": [
      {
        "types": [
          "TypeError"
        ],
        "description": ""
      }
    ]
  },
  {
    "__docId__": 131,
    "kind": "get",
    "name": "releaseType",
    "memberof": "src/index.js~MoodleVersion",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~MoodleVersion#releaseType",
    "access": "public",
    "description": "The release's type, e.g. `'development'`.",
    "lineNumber": 1074,
    "type": {
      "nullable": null,
      "types": [
        "ReleaseType",
        "undefined"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 132,
    "kind": "set",
    "name": "releaseType",
    "memberof": "src/index.js~MoodleVersion",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~MoodleVersion#releaseType",
    "access": "public",
    "description": "The release type must be one of `'development'`, `'official'`, or\n`'weekly'`. The value will get automatically cast to lower case before\nvalidation is applied.",
    "lineNumber": 1086,
    "type": {
      "nullable": null,
      "types": [
        "ReleaseType",
        "undefined"
      ],
      "spread": false,
      "description": null
    },
    "throws": [
      {
        "types": [
          "TypeError"
        ],
        "description": ""
      }
    ]
  },
  {
    "__docId__": 134,
    "kind": "get",
    "name": "releaseSuffix",
    "memberof": "src/index.js~MoodleVersion",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~MoodleVersion#releaseSuffix",
    "access": "public",
    "description": "The release suffix for the release's type, e.g. `'+'` for weekly\nupdates to the official releases.",
    "lineNumber": 1100,
    "type": {
      "nullable": null,
      "types": [
        "ReleaseSuffix",
        "undefined"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 135,
    "kind": "set",
    "name": "releaseSuffix",
    "memberof": "src/index.js~MoodleVersion",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~MoodleVersion#releaseSuffix",
    "access": "public",
    "description": "The release suffix must be one of `'dev'`, an empty string, or `'+'`. The\nvalue will get automatically cast to lower case before validation is\napplied.",
    "lineNumber": 1112,
    "type": {
      "nullable": null,
      "types": [
        "ReleaseSuffix",
        "undefined"
      ],
      "spread": false,
      "description": null
    },
    "throws": [
      {
        "types": [
          "TypeError"
        ],
        "description": ""
      }
    ]
  },
  {
    "__docId__": 137,
    "kind": "get",
    "name": "buildNumber",
    "memberof": "src/index.js~MoodleVersion",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~MoodleVersion#buildNumber",
    "access": "public",
    "description": "The build number.",
    "lineNumber": 1125,
    "type": {
      "nullable": null,
      "types": [
        "BuildNumber",
        "undefined"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 138,
    "kind": "set",
    "name": "buildNumber",
    "memberof": "src/index.js~MoodleVersion",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~MoodleVersion#buildNumber",
    "access": "public",
    "description": "Build numbers must be valid date numbers, i.e. of the form `YYYYMMDD`.",
    "lineNumber": 1135,
    "type": {
      "nullable": null,
      "types": [
        "ReleaseSuffix",
        "undefined"
      ],
      "spread": false,
      "description": null
    },
    "throws": [
      {
        "types": [
          "TypeError"
        ],
        "description": ""
      }
    ]
  },
  {
    "__docId__": 141,
    "kind": "get",
    "name": "version",
    "memberof": "src/index.js~MoodleVersion",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~MoodleVersion#version",
    "access": "public",
    "description": "The short human-friendly form of the version number.\n\nIn keeping with how Moodle presents version strings, release numbers of\nzero are omitted. If the release type is unknown no suffix is appended.\nIf the branch is unknown it is represented as `'??.??'`, and if the\nrelease number is unknown it's represented as `'.??'`.",
    "lineNumber": 1159,
    "type": {
      "nullable": null,
      "types": [
        "VersionString"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 142,
    "kind": "get",
    "name": "versionNumber",
    "memberof": "src/index.js~MoodleVersion",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~MoodleVersion#versionNumber",
    "access": "public",
    "description": "The under-the-hood form of the version number.\n\nIf the branch is unknown its replaced with eight question marks, and if\nthe release number is unknown it's replaced with two.",
    "lineNumber": 1174,
    "type": {
      "nullable": null,
      "types": [
        "VersionNumber"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 143,
    "kind": "get",
    "name": "release",
    "memberof": "src/index.js~MoodleVersion",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~MoodleVersion#release",
    "access": "public",
    "description": "The long human-friendly form of the version information.\n\nIn keeping with how Moodle presents version strings, release numbers of\nzero are omitted. If the release type is unknown no suffix is appended.\nIf the branch is unknown it is represented as `'??.??'`, if the\nrelease number is unknown it's represented as `'.??'`, and if the build\nnumber is unknown it's represented as `'????????'`.",
    "lineNumber": 1191,
    "type": {
      "nullable": null,
      "types": [
        "ReleaseString"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 144,
    "kind": "method",
    "name": "clone",
    "memberof": "src/index.js~MoodleVersion",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~MoodleVersion#clone",
    "access": "public",
    "description": "Create a new Moodle version object representing the same version\ninformation.",
    "lineNumber": 1201,
    "return": {
      "nullable": null,
      "types": [
        "MoodleVersion"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 145,
    "kind": "method",
    "name": "toString",
    "memberof": "src/index.js~MoodleVersion",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~MoodleVersion#toString",
    "access": "public",
    "description": "Return a string representation of the version. The output will be of the\nform `B.B.R[S] (type: T, branching date: BD & build: BN)`, e.g.\n`3.3.6 (type: official, branching date: 20170515 & build: 20180517)`.\nUndefined components will be rendered as `??`.",
    "lineNumber": 1219,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 146,
    "kind": "method",
    "name": "toObject",
    "memberof": "src/index.js~MoodleVersion",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~MoodleVersion#toObject",
    "access": "public",
    "description": "The version as a plain object indexed by zero or more of:\n\n* `version`\n* `versionNumber`\n* `release`\n* `branch`\n* `branchNumber`\n* `branchingDateNumber`\n* `branchingDate`\n* `releaseNumber`\n* `releaseType`\n* `releaseSuffix`\n* `buildNumber`",
    "lineNumber": 1243,
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 147,
    "kind": "method",
    "name": "toSemVerObject",
    "memberof": "src/index.js~MoodleVersion",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~MoodleVersion#toSemVerObject",
    "access": "public",
    "description": "An object containing a SemVer\n([Semantic Versioning](https://semver.org)) representation of the\nversion information.",
    "lineNumber": 1266,
    "return": {
      "nullable": null,
      "types": [
        "{major: number, minor: number, patch: number}"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 148,
    "kind": "method",
    "name": "toSemVerArray",
    "memberof": "src/index.js~MoodleVersion",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~MoodleVersion#toSemVerArray",
    "access": "public",
    "description": "An array containing a SemVer\n([Semantic Versioning](https://semver.org)) representation of the\nversion information. The first element will be the major version number,\nthe second the minor, and the third the patch.",
    "lineNumber": 1291,
    "return": {
      "nullable": null,
      "types": [
        "Array<number>"
      ],
      "spread": false,
      "description": "An array of three integers."
    },
    "params": []
  },
  {
    "__docId__": 149,
    "kind": "method",
    "name": "equals",
    "memberof": "src/index.js~MoodleVersion",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~MoodleVersion#equals",
    "access": "public",
    "description": "Test if a given value is a Moodle Version object representing the same\nversion.",
    "lineNumber": 1303,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "val",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 150,
    "kind": "method",
    "name": "compareTo",
    "memberof": "src/index.js~MoodleVersion",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~MoodleVersion#compareTo",
    "access": "public",
    "description": "Compare this version to another.",
    "lineNumber": 1315,
    "params": [
      {
        "nullable": null,
        "types": [
          "MoodleVersion"
        ],
        "spread": false,
        "optional": false,
        "name": "mv",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "`-1` returned if passed version is lesser, `0` if the\npassed version is the same, and `1` if the passed version is greater. If\nthe passed value is not a Moodle version object, `NaN` will be returned."
    }
  },
  {
    "__docId__": 151,
    "kind": "method",
    "name": "sameBranch",
    "memberof": "src/index.js~MoodleVersion",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~MoodleVersion#sameBranch",
    "access": "public",
    "description": "Determine whether this versions is on the same branch as a given version.",
    "lineNumber": 1328,
    "params": [
      {
        "nullable": null,
        "types": [
          "MoodleVersion"
        ],
        "spread": false,
        "optional": false,
        "name": "mv",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean",
        "undefined"
      ],
      "spread": false,
      "description": "If the two versions share a branch then\n`true` is returned, if the branch numbers differ, `false` is returned.\nIf the value passed is not a Moodle version object, or, the branch\nis undefined in both versions, `undefined` is returned."
    }
  },
  {
    "__docId__": 152,
    "kind": "method",
    "name": "lessThan",
    "memberof": "src/index.js~MoodleVersion",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~MoodleVersion#lessThan",
    "access": "public",
    "description": "Determine whether this version is less than a given version.",
    "lineNumber": 1343,
    "params": [
      {
        "nullable": null,
        "types": [
          "MoodleVersion"
        ],
        "spread": false,
        "optional": false,
        "name": "mv",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean",
        "undefined"
      ],
      "spread": false,
      "description": "If the version is definitely lesser then\n`true` is returned, and if the version is equal or definitely greater\nthen `false` is returned. If the value is not a Moodle version object\nthen `undefined` is returned."
    }
  },
  {
    "__docId__": 153,
    "kind": "method",
    "name": "greaterThan",
    "memberof": "src/index.js~MoodleVersion",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~MoodleVersion#greaterThan",
    "access": "public",
    "description": "Determine whether this version is greater than a given version.",
    "lineNumber": 1358,
    "params": [
      {
        "nullable": null,
        "types": [
          "MoodleVersion"
        ],
        "spread": false,
        "optional": false,
        "name": "mv",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean",
        "undefined"
      ],
      "spread": false,
      "description": "If the version is definitely greater then\n`true` is returned, and if the version is equal or definitely less than\nthen `false` is returned. If the value is not a Moodle version object\nthen `undefined` is returned."
    }
  },
  {
    "__docId__": 154,
    "kind": "method",
    "name": "atLeast",
    "memberof": "src/index.js~MoodleVersion",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~MoodleVersion#atLeast",
    "access": "public",
    "description": "Determine whether this version is greater than or equal to the given version.",
    "lineNumber": 1373,
    "params": [
      {
        "nullable": null,
        "types": [
          "MoodleVersion"
        ],
        "spread": false,
        "optional": false,
        "name": "mv",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean",
        "undefined"
      ],
      "spread": false,
      "description": "If the version is definitely greater or\nequal then `true` is returned, and if the version is definitely less\nthan then `false` is returned. If the value is not a Moodle version\nobject then `undefined` is returned."
    }
  },
  {
    "__docId__": 155,
    "kind": "method",
    "name": "isStable",
    "memberof": "src/index.js~MoodleVersion",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~MoodleVersion#isStable",
    "access": "public",
    "description": "Is this a stable release? I.e. is the release type `official` or\n`weekly`?",
    "lineNumber": 1387,
    "return": {
      "nullable": null,
      "types": [
        "boolean",
        "undefined"
      ],
      "spread": false,
      "description": "Both official and weekly releases are\nconsidered stable, while development releases are not. If the release\ntype is not defined, `undefined` is returned."
    },
    "params": []
  },
  {
    "__docId__": 156,
    "kind": "method",
    "name": "isKnownBranch",
    "memberof": "src/index.js~MoodleVersion",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~MoodleVersion#isKnownBranch",
    "access": "public",
    "description": "Is this version on a branch the library knows about?",
    "lineNumber": 1397,
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 157,
    "kind": "method",
    "name": "isLTS",
    "memberof": "src/index.js~MoodleVersion",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~MoodleVersion#isLTS",
    "access": "public",
    "description": "Determine whether or not this is version is on a long-term support\nbranch. If the branch is not defined or unknown, `undefined` is returned.",
    "lineNumber": 1407,
    "return": {
      "nullable": null,
      "types": [
        "boolean",
        "undefined"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "kind": "index",
    "content": "# @maynoothuniversity/moodle-version\n\nA JavaScript class for parsing Moodle version numbers and release strings.\n\nMoodle version identifiers are a lot more complex than those for other software\npackages. You'll find three different representations of the version information\nin common use:\n\n1. *Version Strings* — you'll see these short numbers on the offical Moodle\n   download page. They consist of a branch string (e.g. `3.5`), an optional\n   release number, e.g. `.1`, and an optional suffix (`dev` for developer\n   releases and `+` for weekly releases). So, version `3.3.6+` is a weekly\n   update to the sixth official release of Moodle 3.3.\n2. *Release Strings* - you'll see these long version strings in the Moodle\n   admin area. They consist of the version string with the build number\n   appended to the end, e.g. `Moodle 3.5+ (Build: 20180614)`.\n3. *Version Numbers* - under the hood Moodle represents versions as the date\n   the version was branched in source control in reverse order followed by the\n   release number. So, under the hood `Moodle 3.5+ (Build: 20180614)` is\n   represented as version `2018051700`.\n\nThis JavaScript class is here to help!\n\n## Install & Import\n\n### NodeJS\n\nInstall:\n\n```\nnpm install --save @maynoothuniversity/moodle-version\n```\n\nImport:\n\n```\nconst MoodleVersion = require('@maynoothuniversity/moodle-version');\n```\n\n### ES6 Module\n\n```\n// import\nimport * as MoodleVersion from './dist/index.es.js'\n```\n\n### Browser (from CDN)\n\n```\n<!-- Import module, always imported as MoodleVersion -->\n<script type=\"text/javascript\" src=\"\">https://cdn.jsdelivr.net/npm/@maynoothuniversity/moodle-version/dist/index.js</script>\n```\n\n## Usage\n\n```\nconst MoodleVersion = require('@maynoothuniversity/moodle-version');\nlet mv1;\n\n// create a Moodle Version object from a version string\nmv1 = new MoodleVersion('3.5.4+');\n\n// create a Moodle Version object a version number (Moodle's internal represenation)\nmv1 = new MoodleVersion('2018051704.05');\n\n// create a Moodle Version object from a release string (as seen in admin GUI)\nmv1 = new MoodleVersion('Moodle 3.5.4+ (Build: 20190124)');\n\n// output the version in any format\nconsole.log(mv1.version); // 3.5.4+\nconsole.log(mv1.versionNumber); // 2018051704\nconsole.log(mv1.release); // 3.5.4+ (Build: 20190124)\n\n// interrogate the version\nconsole.log(mv1.branch); // 3.5\nconsole.log(mv1.branchNumber); // 35\nconsole.log(mv1.branchingDate); // 2018-05-17T00:00:00.000Z\nconsole.log(mv1.branchingDateNumber); // 20180517\nconsole.log(mv1.releaseNumber); // 4\nconsole.log(mv1.releaseType); // weekly\nconsole.log(mv1.releaseSuffix); // +\nconsole.log(mv1.buildNumber); // 20190124\nconsole.log(mv1.isStable()); // true\nconsole.log(mv1.isLTS()); // true\n\n// compare versions\nconst mv2 = new MoodleVersion('3.5.4dev');\nconsole.log(mv1.equals(mv2)); // false\nconsole.log(mv1.sameBranch(mv2)); // true\nconsole.log(mv1.lessThan(mv2)); // false\nconsole.log(mv1.greaterThan(mv2)); // true\n```\n\n\n## API Documentation\n\nFull API documentation is available at\n[bbusschots-mu.github.io/moodle-version](https://bbusschots-mu.github.io/moodle-version/).",
    "longname": "/Users/bbusschots/Documents/Temp/From MU GitHub/moodle-version/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"@maynoothuniversity/moodle-version\",\n  \"version\": \"0.1.11\",\n  \"description\": \"A parser for Moodle version strings\",\n  \"main\": \"dist/index.js\",\n  \"module\": \"dist/index.es.js\",\n  \"files\": [\n    \"dist\"\n  ],\n  \"publishConfig\": {\n    \"access\": \"public\"\n  },\n  \"scripts\": {\n    \"build\": \"./node_modules/rollup/dist/bin/rollup -c\",\n    \"docs\": \"./node_modules/.bin/esdoc -c ./esdoc.json\",\n    \"docs-dev\": \"./node_modules/.bin/esdoc -c ./esdoc-dev.json\",\n    \"test\": \"./node_modules/.bin/qunit -c MoodleVersion:./dist/index.js -d is:./node_modules/is_js _:./node_modules/lodash util:./node_modules/@maynoothuniversity/mu-qunit-util -t ./test/tests.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/bbusschots-mu/moodle-version.git\"\n  },\n  \"keywords\": [\n    \"Moodle\"\n  ],\n  \"author\": \"Bart Busschots\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/bbusschots-mu/moodle-version/issues\"\n  },\n  \"homepage\": \"https://github.com/bbusschots-mu/moodle-version#readme\",\n  \"dependencies\": {\n    \"is_js\": \"^0.9.0\"\n  },\n  \"devDependencies\": {\n    \"@maynoothuniversity/mu-qunit-util\": \"^1.1.3\",\n    \"esdoc\": \"^1.1.0\",\n    \"esdoc-node\": \"^1.0.5\",\n    \"esdoc-standard-plugin\": \"^1.0.0\",\n    \"lodash\": \"^4.17.21\",\n    \"node-qunit\": \"^2.0.0\",\n    \"rollup\": \"^2.53.2\",\n    \"rollup-plugin-commonjs\": \"^10.1.0\",\n    \"rollup-plugin-node-resolve\": \"^5.2.0\"\n  }\n}\n",
    "longname": "/Users/bbusschots/Documents/Temp/From MU GitHub/moodle-version/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  }
]